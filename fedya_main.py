# include necessary libraries/files
from pathlib import Path
from dotenv import load_dotenv
from os.path import join, dirname
from twitchio.ext import commands
from playsound import playsound
from datetime import datetime
import pygetwindow as gw

import openai
import random
import os
import asyncio
import pyautogui

# for handling logging messages in an appropriate folder
log_dir = "D:/repos/python-twitchio-chat-bot/logs"
if not os.path.exists(log_dir):
    os.makedirs(log_dir)

# OUTDATED for handling sound file location
# sound_path = "D:/repos/python-twitchio-chat-bot/sound.mp3"

# declare global lists
greetings_ua = ["–ó–¥–æ—Ä–æ–≤!", "–ü—Ä–∏–≤—ñ—Ç!", "–í—ñ—Ç–∞—é!",
                "–í—ñ—Ç–∞–Ω–Ω—è!", "–Ø–∫ —Å—è –º–∞—î—à?", "–°–ª–∞–≤–∞ –£–∫—Ä–∞—ó–Ω—ñ!", "–Ø–∫ –≤–æ–Ω–æ?", "–ë–∞–∂–∞—é –∑–¥–æ—Ä–æ–≤'—è!", "–†–∞–¥–∏–π –≤—ñ—Ç–∞—Ç–∏!", "–†–∞–¥–∏–π –±–∞—á–∏—Ç–∏!", "–Ø–∫ —Å–ø—Ä–∞–≤–∏?", "–Ø–∫ –∑–¥–æ—Ä–æ–≤'—è?"]
greetings_en = ["Hey!", "What's up?", "Yo!", "Greetings!", "Hi there!", "Howdy!", "How's it going?", "What's new?",
                "Good day!", "What's happening?", "Sup?", "How's everything?", "What's up, buddy?", "Good to see you!"]
goodbye_ua = ["–î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è", "–î–æ–≤—ñ–¥–∑–µ–Ω'—è", "–ü–∞-–ø–∞",
              "–î–æ –∑—É—Å—Ç—Ä—ñ—á—ñ", "–ü–æ–±–∞—á–∏–º–æ—Å—å —â–µ", "–ü—Ä–∏—Ö–æ–¥—å—Ç–µ —â–µ", "–ü—Ä–æ—â–∞–≤–∞–π—Ç–µ"]

# for processing messages from user
last_message_time = {}
messages_tracker = {}

# declare global emotes lists
emotes_all_twitch = [";p", ";)", ":O", ":p", "\:-?\)", "ANELE", "ArgieB8", "B-?\)", "BCWarrior", "BegWan", "BibleThump", "bleedPurple", "BloodTrail", "BOP", "BrainSlug", "BrokeBack", "BuddhaBar", "CarlSmile", "CaitlynS", "ChefFrank", "cmonBruh", "CoolCat", "CoolStoryBob", "CorgiDerp", "CrreamAwk", "DxCat", "DoritosChip", "FallWinning", "FallCry", "FallHalp", "FrankerZ", "GivePLZ", "GlitchLit", "GlitchNRG", "GunRun", "HolidayCookie", "HassaanChop", "Jebaited", "Kappa", "KappaClaus", "KappaPride", "KappaRoss", "KappaWealth", "Keepo", "KevinTurtle", "Kippa", "KomodoHype", "KonCha", "Kreygasm",
                     "LUL", "Lechonk", "MrDestructoid", "NotATK", "NotLikeThis", "NinjaGrumpy", "MVGame", "MorphinTime", "MyAvatar", "OSFrog", "OpieOP", "O_o", "OhMyDog", "Poooound", "PopCorn", "PogBones", "PotFriend", "PunchTrees", "RaccAttack", "RalpherZ", "ResidentSleeper", "RitzMitz", "RlyTho", "ShazBotstix", "SabaPing", "SMOrc", "SSSsss", "StinkyCheese", "StinkyGlitch", "StrawBeary", "SUBprise", "SuperVinlin", "SwiftRage", "TakeNRG", "TBAngel", "TearGlove", "TehePelo", "TF2John", "TheIlluminati", "TheTarFu", "TPFufun", "TriHard", "UnSane", "UWot", "VoHiYo", "WTRuck", "WutFace", "YouDontSay", "YouWHY"]
emotes_greet = ["PotFriend", "KonCha", "SUBprise", "TPFufun", "TehePelo", "BegWan", "Poooound",
                "GivePLZ", "DxCat", "bleedPurple", "RitzMitz", "<3", "VoHiYo", "RaccAttack", "GlitchCat", "HeyGuys"]
emotes_hand = ["‚úã", "‚úåÔ∏è", "üëê", "üëã", "ü§ö", "ü§ô"]
emotes_racc = ["RaccAttack", "ü¶ù"]
emotes_nose = ["üëÉ", "üêΩ", "üëÉüèª", "üëÉüèø", "üëÉüèΩ", "üëÉüèº", "üëÉüèæ", "üë∫"]
emotes_tongue = ["üëÖ", "üòõ", "üòú", "üòù", "üëª", "ü•µ", "ü§™", "üòã"]
emotes_shy = ["ü§ó", "üëê", "ü§≠", "üòÑ", "ü•∞", "üòº", "üòô", "üòç", "üòª", "üòÖ"]
emotes_laugh = ["üçë", "ü§£", "üòÇ", "üíÄ", "‚ò†Ô∏è", "üòπ", "üòÜ", "üôà", "üòà", "üëΩ"]
emotes_poo = ["CrreamAwk", "LUL", "DarkMode",
              "GlitchNRG", "BabyRage"]
emotes_kiss = ["üëÑ", "üíã", "üòò", "üòö", "üòô", "üòΩ"]
emotes_pistol = ["üî´", "üéØ", "üîÅ", "üîÑ"]
emotes_slug = ["üêå", "üêõ", "üêåüçÑ", "üêåüå≥", "üêåüå±", "üêåüêö", "üêåüè†", "üêåüçΩÔ∏è", "üêåüåßÔ∏è"]
letters_dict = {
    'q': '–π',
    'w': '—Ü',
    'e': '—É',
    'r': '–∫',
    't': '–µ',
    'y': '–Ω',
    'u': '–≥',
    'i': '—à',
    'o': '—â',
    'p': '–∑',
    '[': '—Ö',
    ']': '—ó',
    'a': '—Ñ',
    's': '—ñ',
    'd': '–≤',
    'f': '–∞',
    'g': '–ø',
    'h': '—Ä',
    'j': '–æ',
    'k': '–ª',
    'l': '–¥',
    ';': '–∂',
    "'": '—î',
    'z': '—è',
    'x': '—á',
    'c': '—Å',
    'v': '–º',
    'b': '–∏',
    'n': '—Ç',
    'm': '—å',
    ',': '–±',
    '.': '—é',
    '/': '.',
    'Q': '–ô',
    'W': '–¶',
    'E': '–£',
    'R': '–ö',
    'T': '–ï',
    'Y': '–ù',
    'U': '–ì',
    'I': '–®',
    'O': '–©',
    'P': '–ó',
    '{': '–•',
    '}': '–á',
    'A': '–§',
    'S': '–Ü',
    'D': '–í',
    'F': '–ê',
    'G': '–ü',
    'H': '–†',
    'J': '–û',
    'K': '–õ',
    'L': '–î',
    ':': '–ñ',
    '"': '–Ñ',
    'Z': '–Ø',
    'X': '–ß',
    'C': '–°',
    'V': '–ú',
    'B': '–ò',
    'N': '–¢',
    'M': '–¨',
    '<': '–ë',
    '>': '–Æ',
    '?': ',',
    '@': '"',
    '#': '‚Ññ',
    '$': ';',
    '^': ':',
    '&': '?'
}


# for handling bot setup
TMI_TOKEN = "oauth:9267z36swbnmh2apun2fnz7d0ly939"
CLIENT_ID = "y6rcb4jxi1usz9x0zhhx1q4yta5hxl"
BOT_NICK = "pawrop"
BOT_PREFIX = "!"
CHANNEL = "PixelFedya"
# CHANNEL = "seesmof"

# initialize the bot with the necessary variables
bot = commands.Bot(
    irc_token=TMI_TOKEN,
    client_id=CLIENT_ID,
    nick=BOT_NICK,
    prefix=BOT_PREFIX,
    initial_channels=[CHANNEL]
)


def split_long_message(input_string):
    words = input_string.split()
    # create a list to hold the resulting strings
    result = []
    # loop through the words, adding each group of six to the result list
    for i in range(0, len(words), 10):
        result.append(" ".join(words[i:i+10]))
    return result


# declare a function for sending split messages to chat
async def send_split_message(ctx, message):
    # split the given message
    substrings_list = split_long_message(message)
    # send each message
    for substring in substrings_list:
        await ctx.channel.send(substring)
        # add delay between each message
        await asyncio.sleep(2)


# declare a function for checking the message for input
def check_for_letters(text, letters):
    # for each letter in letters list
    for letter in letters:
        # check if letter is in the list
        if letter in text:
            return True
    return False


# declare bot event when bot is ready
@ bot.event
async def event_ready():
    # print bot and channel name when it activates
    print(f"{BOT_NICK} is online at {CHANNEL}!")
    # log it
    write_to_log(f"is online at {CHANNEL}!", " BOT")


# declare bot event on every message
@ bot.event
async def event_message(ctx):
    # add delay to prevent spamming and shadow banning
    # await asyncio.sleep(2)

    # handle situations with messages from a bot itself
    if ctx.author.name.lower() == BOT_NICK.lower():
        # log the message and move on
        print(f"\nBOT: {ctx.content}")
        write_to_log(ctx.content, "BOT")
        return
    elif ctx.author.name.lower() == "streamelements":
        # log the message and move on
        print(f"\nBOT: {ctx.content}")
        return

    # for handling users in chat
    global last_message_time
    user = ctx.author.name
    if user not in last_message_time:
        # user is sending the first message of the day
        last_message_time[user] = datetime.now()

        # OUTDATED greet the user with a random greeting
        # await ctx.channel.send(f"@{user}, {random.choice(greetings_ua)} –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ")
    else:
        # user has sent a message before
        last_time = last_message_time[user]
        today = datetime.now().date()
        if last_time.date() < today:
            # user is sending the first message of the day
            last_message_time[user] = datetime.now()

            # OUTDATED greet the user with a random greeting
            # await ctx.channel.send(f"@{user}, {random.choice(greetings_ua)} –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ")

    if ctx.author.name not in messages_tracker:
        messages_tracker[ctx.author.name] = []
    messages_tracker[ctx.author.name].append(ctx.content)

    # for handling fine patriots
    letters = ["@pawrop"]
    # check if message contains the text
    if check_for_letters(ctx.content.lower(), letters):
        phrases = ["–Ω–∞–∂–∞–ª—å, —è –Ω–µ –º–æ–∂—É –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ –≤–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è",
                   "—è –Ω–µ –∑–Ω–∞—é –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ —Ü–µ", "—è –Ω–µ –∑–¥–∞—Ç–Ω–∏–π –≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"]
        await ctx.channel.send(f"@{ctx.author.name}, {random.choice(phrases)}. –ö—Ä–∞—â–µ —Å–ø–∏—Ç–∞–π—Ç–µ wuyodo :) –í–≤–µ–¥—ñ—Ç—å !–≥–ø—Ç —É —á–∞—Ç, —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –±—ñ–ª—å—à–µ")

    # for handling kacaps
    letters = ["—ç", "—ã", "—ë", "—ä"]
    # check if message contains such letters
    if check_for_letters(ctx.content.lower(), letters):
        # output error message to user
        await ctx.channel.send(f"@{ctx.author.name}, –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ –∑–∞ –Ω–µ–¥–æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–∞–≤–∏–ª —á–∞—Ç—É SMOrc —Ä–æ—Å—ñ–π—Å—å–∫–∞ –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–∞ –≤ —á–∞—Ç—ñ")

    # for handling fine patriots
    letters = ["—Å–ª–∞–≤–∞ —É–∫—Ä–∞—ó–Ω—ñ"]
    # check if message contains the text
    if check_for_letters(ctx.content.lower(), letters):
        # output message to user
        await ctx.channel.send(f"@{ctx.author.name}, –ì–µ—Ä–æ—è–º —Å–ª–∞–≤–∞!")

    # for handling fine patriots
    letters = ["—Å–ª–∞–≤–∞ –Ω–∞—Ü—ñ—ó"]
    # check if message contains the text
    if check_for_letters(ctx.content.lower(), letters):
        # output message to user
        await ctx.channel.send(f"@{ctx.author.name}, –°–º–µ—Ä—Ç—å –≤–æ—Ä–æ–≥–∞–º!")

    # for handling some dickhead
    letters = ["–ø—É—Ç—ñ–Ω"]
    # check if message contains this nonsense
    if check_for_letters(ctx.content.lower(), letters):
        letterX = ["x", "—Ö", "·∫ã"]
        letterY = ["y", "—É", "·∫ô"]
        letterO = ["–æ", "o", "√∏", "«ø", "√∂", "»´", "√≥", "√≤", "√¥",
                   "·ªë", "»±", "»Ø", "»è", "≈è", "≈ë", "«í", "·ªô", "·ªó", "·ªï", "·ªì", "·ªç", "∆°", "·ªè", "·ªü", "·ª£", "·ª°", "·ªù", "·ªõ", "·¥è", "·¥ë"]
        # output message to user
        await ctx.channel.send(f"@{ctx.author.name}, {random.choice(letterX)}{random.choice(letterY)}–π–ª{random.choice(letterO)}!")

    # for handling some dickhead
    letters = ["seesmof", "seesmoff", "—Å—ñ—Å–º—É—Ñ", "—Å—ñ—Å–º–æ—Ñ"]
    # check if message contains this nonsense
    if check_for_letters(ctx.content.lower(), letters):
        output_message = "@" + ctx.author.name + ": " + ctx.content
        pyautogui.alert(output_message, "–ß—É–≤–∞—á–µ, –¥–∏–≤–∏ —á–∞—Ç!", timeout=None)

    ''' Temporarily disabled
    # for handling greetings
    letters = ["–¥–æ—Ä–æ—É", "–ø—Ä–∏–≤—ñ—Ç", "–∑–¥–æ—Ä–æ—É", "–∑–¥–æ—Ä–æ–≤", "–¥–æ—Ä–æ–≤", "—Ö–∞–π", "–±—É–µ–Ω–æ", "–≤—ñ—Ç–∞—é", "–¥–æ–±—Ä–æ–≥–æ –≤–µ—á–æ—Ä–∞",
               "–¥–æ–±—Ä–∏–π –≤–µ—á—ñ—Ä", "–≤—ñ—Ç–∞–º–±–∞", "–¥–æ–±—Ä–æ–≥–æ –¥–Ω—è", "–¥–æ–±—Ä–∏–π –¥–µ–Ω—å", "–¥–æ–±—Ä–æ–≥–æ —Ä–∞–Ω–∫—É", "–¥–æ–±—Ä–∏–π —Ä–∞–Ω–æ–∫", "–≤—ñ—Ç–∞–Ω–Ω—è", "—è–∫ —Å—è –º–∞—î—à", "—è–∫ –≤–æ–Ω–æ", "–±–∞–∂–∞—é –∑–¥–æ—Ä–æ–≤'—è", "—Ä–∞–¥–∏–π –≤—ñ—Ç–∞—Ç–∏", "—Ä–∞–¥–∏–π –±–∞—á–∏—Ç–∏", "—è–∫ —Å–ø—Ä–∞–≤–∏", "—è–∫ –∑–¥–æ—Ä–æ–≤'—è", "hey", "hello", "hiya"]
    # check if message contains the greeting
    if check_for_letters(ctx.content.lower(), letters):
        # greet the user
        await ctx.channel.send(f"@{user}, {random.choice(greetings_ua)} –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ")
    '''

    # handle any commands if found
    await bot.handle_commands(ctx)

    # print out the chat message to console and log it
    print(f"\n{ctx.author.name}: {ctx.content}")
    write_to_log(ctx.content, ctx.author.name)


# declare a function for writing messages to log
def write_to_log(message, author):
    # for handling current time
    now = datetime.now()
    # for handling the file name
    file_name = CHANNEL + "_log_" + now.strftime("%d-%m-%Y") + ".txt"
    # for handling the file path
    file_path = os.path.join(log_dir, file_name)

    # open file with appropriate decoding
    with open(file_path, "a", encoding="utf-8") as log_file:
        # declare and output timestamp before message
        timestamp = datetime.now().strftime('%H:%M:%S')
        log_file.write(timestamp)
        # output message with author name to log
        log_file.write(f"\n{author}: {message}\n\n")


# declare a function for showing information about bot
@ bot.command(name='—ñ–Ω—Ñ–∞')
async def show_info(ctx):
    # output bot information
    await ctx.send(f"@{ctx.author.name}, –º–µ–Ω–µ –∑–≤–∞—Ç–∏ –©–Ü–©-–ë–æ—Ç —ñ —è –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π –®–Ü-–ø–æ–º—ñ—á–Ω–∏–∫ –≤ —á–∞—Ç—ñ –ü—ñ–∫—Å–µ–ª—å–Ω–æ–≥–æ. –í–∏ –º–æ–∂–µ—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç–∏ –º–µ–Ω—ñ –±—É–¥—å-—è–∫–µ –ø–∏—Ç–∞–Ω–Ω—è, –ø—Ä–æ—Å—Ç–æ –¥–æ–¥–∞–≤—à–∏ \"@wuyodo\" –¥–æ —Å–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –¢–∞–∫–æ–∂, —â–æ–± –ø–æ–¥–∏–≤–∏—Ç–∏—Å—å –º–æ—ó —ñ—Å–Ω—É—é—á—ñ –∫–æ–º–∞–Ω–¥–∏, –Ω–∞–ø–∏—à—ñ—Ç—å \"!–∫–æ–º–∏\" –≤ —á–∞—Ç. –Ø–∫—â–æ –í–∏ –º–∞—î—Ç–µ —ñ–¥–µ—ó —Å—Ç–æ—Å–æ–≤–Ω–æ –º–æ–≥–æ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è, –±—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à—ñ—Ç—å —ó—Ö —á–µ—Ä–µ–∑ \"!–¥–æ–¥–∞–π\" —ñ —Ü–µ –æ–±–æ–≤'—è–∑–∫–æ–≤–æ –¥–æ–ø–æ–º–æ–∂–µ –º–µ–Ω—ñ —Å—Ç–∞—Ç–∏ –∫—Ä–∞—â–µ")


# declare a function for showing commands
@ bot.command(name='–∫–æ–º–∏', aliases=['help', '–∫–æ–º–∞–Ω–¥–∏'])
async def show_commands(ctx):
    # output current commands
    await ctx.send(f"@{ctx.author.name}, –ù–∞—è–≤–Ω—ñ –∫–æ–º–∞–Ω–¥–∏: \"!—î–Ω–æ—Ç\", \"!–ø—Ä\", \"!hi\", \"!—Ñ–æ–ª\", \"!–æ\", \"!–ª–∏–∑\", \"!–Ω—é—Ö\", \"!–º–∞—Ü\", \"!–ø—É–∫\", \"!–±–æ–±\", \"!–≥–∞–º\", \"!–±–∞–Ω\", \"!–±–∞–º\", \"!—Ü—å–æ–º\", \"!–¥–æ–¥–∞–π\", \"!—Ç–≥\", \"!–≥–ø—Ç\", \"!gpt\", \"!–æ–∫—Å–∞\", \"!—â—ñ—â\", \"!–∑—Ä—ñ—Å—Ç\", \"!she\", \"!–¥–Ω\", \"!—à–∞–Ω—Å\", \"!–µ–º\", \"!–ø–∫\", \"!–º–∞–∫\", \"!—á–æ–≥–æ\", \"!–¥–µ\", \"!–±–ª—ñ–Ω\", \"!–æ–π\", \"!–±–∞—Ç—å–∫–æ\", \"!–∫–æ—Ü\"")


@ bot.command(name='—î–Ω–æ—Ç')
async def give_raccoon(ctx):
    # get username from message
    username = ctx.content[5:]
    phrases_one = ["—Ç—Ä–∏–º–∞–π", "–ª–æ–≤–∏", "—Ö–∞–ø–∞–π", "–Ω–∞"]
    phrases_two = ["—î–Ω–æ—Ç–∞", "—î–Ω–æ—Ç–∏–∫–∞"]
    # if no user was mentioned
    if "@" not in username:
        # set username to user who sent the message
        global last_message_time
        username = '@' + random.choice(list(last_message_time))
    # output message
    await ctx.send(f"{username}, {random.choice(phrases_one)} {random.choice(phrases_two)} {random.choice(emotes_racc)}")


@ bot.command(name='–ø—Ä')
async def say_hi_ua(ctx):
    # get username from message
    username = ctx.content[3:]
    # if not user was mentioned
    if "@" not in username:
        # then set username to user who sent the message
        global last_message_time
        username = '@' + random.choice(list(last_message_time))
    # output the greeting message and tag the user
    await ctx.send(f"{username}, {random.choice(greetings_ua)} {random.choice(emotes_greet + emotes_hand)}")


@ bot.command(name='hi')
async def say_hi_en(ctx):
    # get username from message
    username = ctx.content[3:]
    # check if no user is tagged in the message
    if "@" not in username:
        # if not set username to the user who sent the message
        global last_message_time
        username = '@' + random.choice(list(last_message_time))
    # output the greeting message and tag the user
    await ctx.send(f"{username}, {random.choice(greetings_en)} {random.choice(emotes_greet + emotes_hand)}")


@ bot.command(name='—Ñ–æ–ª', aliases=['fall', 'fg'])
async def fall_guys_instruction(ctx):
    # get username from message
    code = ctx.content[4:]
    # check if no user is tagged in the message
    if code == "":
        # if not set username to the user who sent the message
        code = "Lobby Code"
    # output the greeting message and tag the user
    await ctx.send(f"@{ctx.author.name}, —â–æ–± –¥–æ—î–¥–Ω–∞—Ç–∏—Å—å –¥–æ –Ω–∞—Å –≤ –≥—Ä—ñ Fall Guys, –≤–∏–∫–æ–Ω–∞–π—Ç–µ –Ω–∞—Å—Ç—É–ø–Ω—ñ –¥—ñ—ó: Show Selector -> Custom Shows -> Join -> Enter {code}. –ú–∞–π—Ç–µ –Ω–∞ —É–≤–∞–∑—ñ, —Ü—é –≥—Ä—É –º–æ–∂–Ω–∞ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤ –ª–∞—É–Ω—á–µ—Ä—ñ Epic Games —ñ –≤–∞–∂–∏—Ç—å –≤–æ–Ω–∞ 5,42–ì–ë")


@ bot.command(name='–æ', aliases=['so', '—à–∞—Ç–∞—É—Ç'])
async def give_shoutout(ctx):
    # get username from message
    username = ctx.content[2:]
    # check if no user is tagged in the message
    if "@" not in username:
        # if not set username to the user who sent the message
        username = "@PixelFedya"
    # output the greeting message and tag the user
    await ctx.send(f"–ü—ñ–¥–ø–∏—Å—É–π—Ç–µ—Å—å –Ω–∞ —Ñ–∞–π–Ω—é—Ü—å–∫–æ–≥–æ —Å—Ç—Ä—ñ–º–µ—Ä–∞ {username}! {random.choice(emotes_kiss)}")


@ bot.command(name='–ª–∏–∑')
async def lick_someone(ctx):
    # get username from message
    username = ctx.content[4:]
    phrases = ["–û–±–ª–∏–∑–∞–≤", "–õ–∏–∑–Ω—É–≤", "*–õ–∏–∑—å*"]
    # check if no user is tagged in the message
    if "@" not in username:
        # if not set username to the user who sent the message
        global last_message_time
        username = '@' + random.choice(list(last_message_time))
    # output the greeting message and tag the user
    await ctx.send(f"{random.choice(phrases)} {username} {random.choice(emotes_tongue)}")


@ bot.command(name='–Ω—é—Ö')
async def smell_someone(ctx):
    # get username from message
    username = ctx.content[4:]
    phrases = ["–ü–æ–Ω—é—Ö–∞–≤", "–û–±–Ω—é—Ö–∞–≤", "*–ù—é—Ö-–Ω—é—Ö*"]
    # check if no user is tagged in the message
    if "@" not in username:
        # if not set username to the user who sent the message
        global last_message_time
        username = '@' + random.choice(list(last_message_time))
    # output the greeting message and tag the user
    await ctx.send(f"{random.choice(phrases)} {username} {random.choice(emotes_nose)}")


@ bot.command(name='–º–∞—Ü')
async def touch_someone(ctx):
    # get username from message
    username = ctx.content[4:]
    phrases = ["–ü–æ–º–∞—Ü–∞–≤", "–û–±–º–∞—Ü–∞–≤", "–ü–æ–ª–∞–ø–∞–≤", "–û–±–ª–∞–ø–∞–≤", "*–ú–∞—Ü–∞—î*"]
    # check if no user is tagged in the message
    if "@" not in username:
        # if not set username to the user who sent the message
        global last_message_time
        username = '@' + random.choice(list(last_message_time))
    # output the greeting message and tag the user
    await ctx.send(f"{random.choice(phrases)} {username} {random.choice(emotes_shy)}")


@ bot.command(name='–ø—É–∫')
async def fart_someone(ctx):
    # get username from message
    username = ctx.content[4:]
    phrases = ["–ü—É–∫–Ω—É–≤ –Ω–∞", "–ó—ñ–ø—Å—É–≤–∞–≤ –ø–æ–≤—ñ—Ç—Ä—è –¥–ª—è", "*–ü—É–∫* —É –±—ñ–∫"]
    # check if no user is tagged in the message
    if "@" not in username:
        # if not set username to the user who sent the message
        global last_message_time
        username = '@' + random.choice(list(last_message_time))
    # output the greeting message and tag the user
    await ctx.send(f"{random.choice(phrases)} {username} {random.choice(emotes_laugh)}")


@ bot.command(name='–±–æ–±', aliases=['–±–æ–±–∏–∫'])
async def give_bob(ctx):
    username = ctx.content[4:]
    # check if no user is tagged in the message
    if "@" not in username:
        # if not set username to the user who sent the message
        username = '@' + ctx.author.name
    # get a random percentage using
    chance = random.randint(-5, 30)
    phrases = ["–æ–≥–æ", "–π–æ–π", "—á–æ–ª–æ–≤—ñ—á–µ"]
    bob = ["–±–æ–±–∏–∫–∞", "–∞–Ω–∞–∫–æ–Ω–¥—É", "–±–∞–ª—É–º–±—É", "–∑–º—ñ—é–∫—É", "–∞–ø–∞—Ä–∞—Ç–∞",
           "—à–∏–ª–∏–∫–∞–ª–æ", "—Å–ø–∏—Å–∞", "–∫–∞–±–∞—á–∫–∞", "–±–∞–Ω–∞–Ω–∞", "–ø–∞—Ç–∏–∫–∞", "—à–∞–º–ø—É—Ä–∞"]
    # output the percentage to user
    await ctx.send(f"{username}, {random.choice(phrases)}, –º–∞—î—à {random.choice(bob)} —É {chance} —Å–º! {random.choice(emotes_laugh)}")


@ bot.command(name='–≥–∞–º')
async def say_gam(ctx):
    # get username from message
    username = ctx.content[4:]
    # create a list of shenanigans
    shenanigans = ["–≥–∞–º–Ω–æ", "–ì–ê–ú–ù–û", "–ì–ê–ú–ù–û–û–û", "–ì–ê–ú–ù–û–û", "–ì–ê–ú–ù–û–û–û–û", "–ª–∞–π–Ω–æ", "–õ–ê–ô–ù–û",
                   "–õ–ê–ô–ù–û–û", "–õ–ê–ô–ù–û–û–û", "–õ–ê–ô–ù–û–û–û–û", "–≥—ñ–≤–Ω–æ", "–ì–Ü–í–ù–û", "–ì–Ü–í–ù–û–û", "–ì–Ü–í–ù–û–û–û", "–ì–Ü–í–ù–û–û–û–û"]
    # check if no user is tagged in the message
    if "@" not in username:
        # if not set username to the user who sent the message
        global last_message_time
        username = '@' + random.choice(list(last_message_time))
    # output a random shenanigan to the user
    await ctx.send(f"{username}, –ª–æ–≤–∏ {random.choice(shenanigans)} {random.choice(emotes_poo + emotes_shy)}")


@ bot.command(name='–±–∞–Ω')
async def ban_user(ctx):
    # get username from message
    username = ctx.content[4:]
    # create a list of shenanigans
    one = ["–í—ñ—Ç–∞—é –∑ –±–∞–Ω–æ–º", "–í–∞—Å –±—É–ª–æ –∑–∞–±–∞–Ω–µ–Ω–æ", "–í–∏ –±—É–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ñ", "–í–∞–º –±–∞–Ω"]
    two = ["", "–Ω–∞ —Ü—å–æ–º—É –∫–∞–Ω–∞–ª—ñ", "–Ω–∞ –∫–∞–Ω–∞–ª—ñ PixelFedya",
           "–Ω–∞ –ø–æ—Ç–æ—á–Ω–æ–º—É –∫–∞–Ω–∞–ª—ñ", "–Ω–∞ —Ñ–∞–π–Ω–æ–º—É –∫–∞–Ω–∞–ª—ñ"]
    global goodbye_ua
    # check if no user is tagged in the message
    if "@" not in username:
        # if not set username to the user who sent the message
        global last_message_time
        username = '@' + random.choice(list(last_message_time))
    # output a random shenanigan to the user
    await ctx.send(f"{username}, {random.choice(one)} {random.choice(two)}! {random.choice(goodbye_ua)} {random.choice(emotes_laugh)}")


@ bot.command(name='–±–∞–º')
async def play_roulette(ctx):
    username = '@' + ctx.author.name
    current_chamber = random.randint(1, 3)
    bullet_chamber = random.randint(1, 3)
    phrase = ["—Å—å–æ–≥–æ–¥–Ω—ñ", "–Ω–∞ —Ü–µ–π —Ä–∞–∑", "—Ü—å–æ–≥–æ —Ä–∞–∑—É", ""]
    one = ["–í—ñ—Ç–∞—é –∑ –±–∞–Ω–æ–º", "–í–∞—Å –±—É–ª–æ –∑–∞–±–∞–Ω–µ–Ω–æ", "–í–∏ –±—É–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ñ", "–í–∞–º –±–∞–Ω"]
    two = ["", "–Ω–∞ —Ü—å–æ–º—É –∫–∞–Ω–∞–ª—ñ", "–Ω–∞ –∫–∞–Ω–∞–ª—ñ PixelFedya",
           "–Ω–∞ –ø–æ—Ç–æ—á–Ω–æ–º—É –∫–∞–Ω–∞–ª—ñ", "–Ω–∞ —Ñ–∞–π–Ω–æ–º—É –∫–∞–Ω–∞–ª—ñ"]
    roll = ["–†–æ–∑–∫—Ä—É—á—É—é", "–ö—Ä—É—á—É", "–ü—Ä–æ–∫—Ä—É—á—É—é"]
    if current_chamber == bullet_chamber:
        await ctx.send(f"{random.choice(roll)} –±–∞—Ä–∞–±–∞–Ω... {random.choice(emotes_pistol)} {username}, {random.choice(one)} {random.choice(two)}! {random.choice(goodbye_ua)} {random.choice(emotes_laugh)}")
    else:
        await ctx.send(f"{random.choice(roll)} –±–∞—Ä–∞–±–∞–Ω... {random.choice(emotes_pistol)} {username}, {random.choice(phrase)} –í–∞–º –ø–æ—â–∞—Å—Ç–∏–ª–æ! –†–µ–≤–æ–ª—å–≤–µ—Ä –Ω–µ –≤–∏—Å—Ç—Ä—ñ–ª–∏–≤ {random.choice(emotes_shy)}")


@ bot.command(name='—Ü—å–æ–º')
async def say_gam(ctx):
    # get username from message
    username = ctx.content[5:]
    # create a list of shenanigans
    phrases = ["–¶—å–æ–º–Ω—É–≤", "–ü–æ—Ü—å–æ–º–∞–≤",
               "*–ù–∞–¥—Å–∏–ª–∞—î —Ü—å–æ–º—á–∏–∫–∞*", "*–¶—å–æ–º–∞—î*", "–¶—å–æ–º"]
    # check if no user is tagged in the message
    if "@" not in username:
        # if not set username to the user who sent the message
        global last_message_time
        username = '@' + random.choice(list(last_message_time))
    # output a random shenanigan to the user
    await ctx.send(f"{random.choice(phrases)} {username} {random.choice(emotes_kiss)}")


@ bot.command(name='–¥–æ–¥–∞–π')
async def add_feature(ctx):
    # tag me and tell to add the proposed function
    await ctx.send(f"@seesmof, {ctx.content[6:]}, –±—ñ–≥–æ–º –¥–æ–¥–∞–≤–∞—Ç–∏!")


@ bot.command(name='—Ç–≥')
async def telegram_show(ctx):
    # output Telegram information
    await ctx.send(f"@{ctx.author.name}, –∞–±–∏ –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞—Ç–∏ —Å—Ç—Ä—ñ–º–∏ –ü—ñ–∫—Å–µ–ª—å–Ω–æ–≥–æ, –ø—ñ–¥–ø–∏—Å—É–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –¢–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º @pixelfedya –≤ –ø–æ—à—É–∫—É –¢–µ–ª–µ–≥—Ä–∞–º—É TehePelo")


@ bot.command(name='–≥–ø—Ç')
async def gpt_instruction_ua(ctx):
    # output hint message
    await ctx.send(f"@{ctx.author.name}, –¥–ª—è —Ç–æ–≥–æ, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ ChatGPT, –ø—Ä–æ—Å—Ç–æ –ø–æ—á–Ω—ñ—Ç—å –í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ @wuyodo —ñ –ø—Ä–æ–¥–æ–≤–∂—ñ—Ç—å –í–∞—à–∏–º –ø–∏—Ç–∞–Ω–Ω—è–º. –ß–µ—Ä–µ–∑ –¥–µ—è–∫–∏–π —á–∞—Å –≤–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å, –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω—É –±–æ—Ç–æ–º ChatGPT :)")


@ bot.command(name='gpt')
async def gpt_instruction_en(ctx):
    # output hint message
    await ctx.send(f"@{ctx.author.name}, to get a response from ChatGPT, just start your message with @wuyodo and continue with your question. After a while, you will receive an answer generated by the ChatGPT bot :)")


@ bot.command(name='–æ–∫—Å–∞')
async def hi_oxa(ctx):
    # say hi to Oksana
    await ctx.send(f"–û–∫—Å–∞–Ω–æ, –ø—Ä–∏–≤—ñ—Ç!")


@ bot.command(name='—â—ñ—â', aliases=['—à—ñ—à', '—â—ñ—à', '—à—ñ—â'])
async def say_sheesh_ua(ctx):
    # create a list of shenanigans
    shenanigans = ["—â—ñ—â", "–©–Ü–©", "–©–Ü–Ü–©", "–©–Ü–Ü–Ü–©", "–©–Ü–Ü–Ü–Ü–©"]
    # output a random shenanigan to the user
    await ctx.send(f"@{ctx.author.name}, {random.choice(shenanigans)}")


@ bot.command(name='–∑—Ä—ñ—Å—Ç')
async def give_height(ctx):
    # output the percentage to user
    await ctx.send(f"@{ctx.author.name}, –∑—Ä—ñ—Å—Ç —Å—Ç—Ä—ñ–º–µ—Ä–∞ –ø—Ä–∏–±–ª–∏–∑–Ω–æ —Å—Ç–∞–Ω–æ–≤–∏—Ç—å 182 —Å–º")


@ bot.command(name='she')
async def say_sheesh_en(ctx):
    # create a list of shenanigans
    shenanigans = ["sheesh", "SHEESH", "SHEEESH", "SHEEEESH", "SHEEEEESH"]
    # output a random shenanigan to the user
    await ctx.send(f"@{ctx.author.name}, {random.choice(shenanigans)}")


@ bot.command(name='–¥–Ω')
async def birthday_congrats(ctx):
    # get username from message
    username = ctx.content[3:]
    # if not user was mentioned
    if "@" not in username:
        # then set username to user who sent the message
        username = '@' + ctx.author.name
    # create a list of random greetings
    greetings = ['–ó –¥–Ω–µ–º –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è! –°—å–æ–≥–æ–¥–Ω—ñ –¥–µ–Ω—å, –∫–æ–ª–∏ –∑–¥—ñ–π—Å–Ω—é—é—Ç—å—Å—è –í–∞—à—ñ –º—Ä—ñ—ó —ñ –≤–∏–∫–æ–Ω—É—é—Ç—å—Å—è –í–∞—à—ñ –±–∞–∂–∞–Ω–Ω—è. –£ —Ü–µ–π –æ—Å–æ–±–ª–∏–≤–∏–π –¥–µ–Ω—å —è –±–∞–∂–∞—é –í–∞–º —â–∞—Å—Ç—è —Ç–∞ —É—Å–ø—ñ—Ö—É –Ω–∞ –≤—Å–µ –∂–∏—Ç—Ç—è. –ù–µ—Ö–∞–π –±–ª–∞–≥–æ–ø–æ–ª—É—á—á—è, —Ä–∞–¥—ñ—Å—Ç—å —ñ –ª—é–±–æ–≤ –æ—Ç–æ—á—É—é—Ç—å –í–∞—Å —Å—å–æ–≥–æ–¥–Ω—ñ —ñ –∑–∞–≤–∂–¥–∏. –í—Å—å–æ–≥–æ –Ω–∞–π–∫—Ä–∞—â–æ–≥–æ –≤ —Ü–µ–π –æ—Å–æ–±–ª–∏–≤–∏–π –¥–µ–Ω—å!', '–ó –î–Ω–µ–º –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è! –¶–µ –í–∞—à –æ—Å–æ–±–ª–∏–≤–∏–π –¥–µ–Ω—å, —ñ —è –±–∞–∂–∞—é –í–∞–º —â–∞—Å–ª–∏–≤–æ–≥–æ —Å–≤—è—Ç–∫—É–≤–∞–Ω–Ω—è! –ù–µ—Ö–∞–π —Ü–µ–π –¥–µ–Ω—å –±—É–¥–µ –Ω–∞–ø–æ–≤–Ω–µ–Ω–∏–π —Ä–∞–¥—ñ—Å—Ç—é, –º—ñ—Ü–Ω–∏–º –∑–¥–æ—Ä–æ–≤`—è–º —ñ –≤–µ–ª–∏–∫–æ—é —É–¥–∞—á–µ—é. –ù–µ—Ö–∞–π –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ä—ñ–∫ –±—É–¥–µ —Å–ø–æ–≤–Ω–µ–Ω–∏–π —É—Å–ø—ñ—Ö–æ–º —Ç–∞ —â–∞—Å—Ç—è–º. –ù–∞—Å–æ–ª–æ–¥–∂—É–π—Ç–µ—Å—å –æ—Å–æ–±–ª–∏–≤–∏–º–∏ –º–æ–º–µ–Ω—Ç–∞–º–∏ —Å–≤–æ–≥–æ –¥–Ω—è –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è —Ç–∞ —Ü—ñ–Ω—É–π—Ç–µ –ª—é–±–æ–≤ —ñ —Ç–µ–ø–ª–æ —Å–≤–æ—ó—Ö –±–ª–∏–∑—å–∫–∏—Ö. –ù–µ—Ö–∞–π –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ä—ñ–∫ –±—É–¥–µ –Ω–∞–π–∫—Ä–∞—â–∏–º!',
                 '–ó –î–Ω–µ–º –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è! –ù–µ—Ö–∞–π —Ü–µ–π –æ—Å–æ–±–ª–∏–≤–∏–π –¥–µ–Ω—å –±—É–¥–µ –Ω–∞–ø–æ–≤–Ω–µ–Ω–∏–π —Ä–∞–¥—ñ—Å—Ç—é —ñ —Å–º—ñ—Ö–æ–º. –ù–µ—Ö–∞–π –í–∞—à–µ —Å–µ—Ä—Ü–µ –±—É–¥–µ –ø–µ—Ä–µ–ø–æ–≤–Ω–µ–Ω–µ —â–∞—Å—Ç—è–º, –∞ –¥–Ω—ñ –±—É–¥—É—Ç—å —Å–ø–æ–≤–Ω–µ–Ω—ñ —á—É–¥–æ–≤–∏–º–∏ –º–æ–º–µ–Ω—Ç–∞–º–∏. –ë–∞–∂–∞—î–º–æ —É–¥–∞—á—ñ —Ç–∞ —É—Å–ø—ñ—Ö—ñ–≤ —É –≤—Å—ñ—Ö –í–∞—à–∏—Ö –ø–æ—á–∏–Ω–∞–Ω–Ω—è—Ö. –§–∞–Ω—Ç–∞—Å—Ç–∏—á–Ω–æ–≥–æ –¥–Ω—è!!', '–ó –î–Ω–µ–º –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è! –ù–µ—Ö–∞–π —Ü–µ–π –æ—Å–æ–±–ª–∏–≤–∏–π –¥–µ–Ω—å –±—É–¥–µ –Ω–∞–ø–æ–≤–Ω–µ–Ω–∏–π —Ä–∞–¥—ñ—Å—Ç—é —Ç–∞ —Å–≤—ñ—Ç–ª–∏–º–∏ –ø–æ—á—É—Ç—Ç—è–º–∏. –ë–∞–∂–∞—î–º–æ –í–∞–º –≤—Å—å–æ–≥–æ –Ω–∞–π–∫—Ä–∞—â–æ–≥–æ –≤ –∂–∏—Ç—Ç—ñ, –Ω–µ—Ö–∞–π –∑–¥—ñ–π—Å–Ω—è—Ç—å—Å—è –≤—Å—ñ –í–∞—à—ñ –º—Ä—ñ—ó —Ç–∞ –ø—Ä–∞–≥–Ω–µ–Ω–Ω—è. –ù–µ—Ö–∞–π –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ä—ñ–∫ –±—É–¥–µ –Ω–∞–¥–∑–≤–∏—á–∞–π–Ω–æ —É—Å–ø—ñ—à–Ω–∏–º!', '–í—ñ—Ç–∞—î–º–æ –∑ –¥–Ω–µ–º –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è —É —Ü–µ–π –æ—Å–æ–±–ª–∏–≤–∏–π –¥–µ–Ω—å! –ù–µ—Ö–∞–π —Ü–µ–π —Ä—ñ–∫ –ø—Ä–∏–Ω–µ—Å–µ –í–∞–º –±–∞–≥–∞—Ç–æ –ø–æ–∑–∏—Ç–∏–≤—É, —Ä–∞–¥–æ—Å—Ç—ñ —Ç–∞ —É—Å–ø—ñ—Ö—É. –ë–∞–∂–∞—é –í–∞–º –≤—Å—å–æ–≥–æ –Ω–∞–π–∫—Ä–∞—â–æ–≥–æ –≤ –∂–∏—Ç—Ç—ñ, —ñ –Ω–µ—Ö–∞–π –≤—Å—ñ –í–∞—à—ñ –º—Ä—ñ—ó –∑–¥—ñ–π—Å–Ω—è—Ç—å—Å—è. –ì–∞—Ä–Ω–æ–≥–æ –¥–Ω—è —Ç–∞ —á—É–¥–æ–≤–æ–≥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ä–æ–∫—É!', '–í—ñ—Ç–∞—î–º–æ –∑ –¥–Ω–µ–º –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è! –ù–µ—Ö–∞–π —Ü–µ–π –æ—Å–æ–±–ª–∏–≤–∏–π –¥–µ–Ω—å –±—É–¥–µ –Ω–∞–ø–æ–≤–Ω–µ–Ω–∏–π –º–æ—Ä–µ–º –≤–µ—Å–µ–ª–æ—â—ñ–≤, –ª—é–±–æ–≤—ñ —Ç–∞ —Å–º—ñ—Ö—É. –ë–∞–∂–∞—é, —â–æ–± —Ü–µ–π —Ä—ñ–∫ –±—É–≤ —á—É–¥–æ–≤–∏–º —ñ —â–æ–± –í–∏ –¥–æ—Å—è–≥–ª–∏ –≤—Å—ñ—Ö —Å–≤–æ—ó—Ö —Ü—ñ–ª–µ–π. –ë–∞–∂–∞—é –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–≥–æ –∂–∏—Ç—Ç—è, —Å–ø–æ–≤–Ω–µ–Ω–æ–≥–æ –±–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω—å. –ó –¥–Ω–µ–º –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è!']
    # output a random greeting tagging the mentioned user
    await ctx.send(f"{username}, {random.choice(greetings)}")


@ bot.command(name='—à–∞–Ω—Å')
async def give_chance(ctx):
    # get a random percentage using
    chance = random.randint(1, 100)
    # output the percentage to user
    await ctx.send(f"@{ctx.author.name}, –≤—ñ—Ä–æ–≥—ñ–¥–Ω—ñ—Å—Ç—å —Ü—å–æ–≥–æ —Å—Ç–∞–Ω–æ–≤–∏—Ç—å {chance}%.")


@ bot.command(name='–µ–º', aliases=['–µ–º–æ–¥–∂—ñ', '–µ–º–æ—Ü—ñ—è', 'emoji', 'em'])
async def print_random_emoji(ctx):
    global_emotes_list = emotes_all_twitch
    # output a random shenanigan to the user
    await ctx.send(random.choice(global_emotes_list))


@ bot.command(name='–ø–∫')
async def show_pc_specs(ctx):
    # output a random shenanigan to the user
    await ctx.send(f"@{ctx.author.name}, –ø—Ä–æ—Ü–µ—Å–æ—Ä - i7-13700K, –≤—ñ–¥–µ–æ–∫–∞—Ä—Ç–∞ - Geforce RTX 3080, –∫–∞–º–µ—Ä–∞ - Logitech BRIO 4K")


@ bot.command(name='–º–∞–∫', aliases=['—Å–ª–∏–º–∞–∫', '—Å–ª–∏–º–∞—á–æ–∫'])
async def act_slug(ctx):
    phrases = ["–ú–æ–∂–ª–∏–≤–æ, —è –ø–æ–≤—ñ–ª—å–Ω–∏–π, –∞–ª–µ —è –∑–∞–≤–∂–¥–∏ —É —Ä—É—Å—ñ. –ù—ñ–∫–æ–ª–∏ –Ω–µ –∑–Ω–∞—î—à, –¥–µ —è –º–æ–∂—É –æ–ø–∏–Ω–∏—Ç–∏—Å—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ä–∞–∑—É!",
               "–Ø —Å–ø—Ä–∞–≤–∂–Ω—ñ–π –ø–æ—à—Ç–æ–≤–∏–π —Ä–∞–≤–ª–∏–∫. –¢—ñ–ª—å–∫–∏ –Ω–µ —Å–ø–æ–¥—ñ–≤–∞–π—Ç–µ—Å—è, —â–æ —è –¥–æ—Å—Ç–∞–≤–ª—é —â–æ—Å—å –≤—á–∞—Å–Ω–æ",
               "–ù–µ—Ö–∞–π —É –º–µ–Ω–µ –Ω–µ–º–∞—î –º—É—à–ª—ñ, –∞–ª–µ –º–µ–Ω—ñ –≤—Å–µ –æ–¥–Ω–æ –∑–∞–∑–¥—Ä—è—Ç—å —É—Å—ñ —Ä–∞–≤–ª–∏–∫–∏",
               "–Ø –Ω—ñ–∫—É–¥–∏ –Ω–µ –ø–æ—Å–ø—ñ—à–∞—é, —è –ø—Ä–æ—Å—Ç–æ –Ω–∞—Å–æ–ª–æ–¥–∂—É—é—Å—è –ø–æ–¥–æ—Ä–æ–∂–∂—é. –ù–∞–≤—ñ—Ç—å —è–∫—â–æ —Ü–µ –∑–∞–π–º–µ —É –º–µ–Ω–µ —Ü—ñ–ª–∏–π –¥–µ–Ω—å",
               "–ú–æ–∂–µ, —è –π –º–∞–ª–µ–Ω—å–∫–∏–π, –∞–ª–µ —è –¥—É–∂–µ –ª—é–±–ª—é –∑–∞–ª–∏—à–∞—Ç–∏ —Å–ª—ñ–¥–∏",
               "–Ø –Ω–µ –ª—ñ–Ω–∏–≤–∏–π, —è –ø—Ä–æ—Å—Ç–æ –∑–±–µ—Ä—ñ–≥–∞—é —Å–≤–æ—é –µ–Ω–µ—Ä–≥—ñ—é –Ω–∞ —Ç–æ–π —á–∞—Å, –∫–æ–ª–∏ –≤–æ–Ω–∞ –º–µ–Ω—ñ –¥—ñ–π—Å–Ω–æ –ø–æ—Ç—Ä—ñ–±–Ω–∞",
               "–Ø –Ω–µ –∑–∞–±–ª—É–∫–∞–≤, —è –ø—Ä–æ—Å—Ç–æ –π–¥—É –º–∞–ª—å–æ–≤–Ω–∏—á–∏–º –º–∞—Ä—à—Ä—É—Ç–æ–º",
               "–ú–æ–∂–ª–∏–≤–æ, —è –Ω–µ –Ω–∞–π—à–≤–∏–¥—à–∏–π, –∞–ª–µ —è —Ç–æ—á–Ω–æ –Ω–∞–π—Å–ø—Ä–∏—Ç–Ω—ñ—à–∏–π",
               "–Ø –Ω–µ —Å–ª–∏–∑—å–∫–∏–π, —è –ø—Ä–æ—Å—Ç–æ –≤–∏–ø—Ä–æ–º—ñ–Ω—é—é —Å–≤–æ—é –ø—Ä–∏—Ä–æ–¥–Ω—É —á–∞—Ä—ñ–≤–Ω—ñ—Å—Ç—å,"
               "–Ø –Ω–µ —Å–ª–∏–º–∞–∫, —è —Å–ª–∏–º–∞–∫-–∑–∞–π—á–∏–∫!"
               "–Ø –Ω–µ —Ä–∞–≤–ª–∏–∫, —è –ø–µ—Ä–µ–æ–¥—è–≥–Ω–µ–Ω–∏–π —Å–ª–∏–º–∞–∫. –¢—Å—Å, –Ω—ñ–∫–æ–º—É –Ω–µ –∫–∞–∂–∏",
               "–ú–æ–∂–ª–∏–≤–æ, —É –º–µ–Ω–µ –Ω–µ–º–∞—î —Ö—Ä–µ–±—Ç–∞, –∞–ª–µ —è –º–æ–∂—É –ø–æ—Å—Ç–æ—è—Ç–∏ –∑–∞ —Å–µ–±–µ",
               "–Ø –Ω–µ –ø–æ–≤—ñ–ª—å–Ω–∏–π, —è –ø—Ä–æ—Å—Ç–æ –Ω–∞—Å–æ–ª–æ–¥–∂—É—é—Å—è –º–æ–º–µ–Ω—Ç–æ–º",
               "–Ø –Ω–µ —Å–ª–∏–º–∞–∫, —è —Å–ª–∏–º–∞—Ü—å–∫–∞ —Å—É–ø–µ—Ä–∑—ñ—Ä–∫–∞!",
               "–ú—ñ–π –ø–∞–Ω—Ü–∏—Ä –Ω–µ –ø—Ä–æ—Å—Ç–æ –¥–ª—è –ø–æ–∫–∞–∑—É—Ö–∏, —Ü–µ –º—ñ–π –ø–µ—Ä–µ—Å—É–≤–Ω–∏–π –¥—ñ–º",
               "–Ø –Ω–µ –ø—Ä–æ—Å—Ç–æ —Ä–∞–≤–ª–∏–∫, —è –Ω—ñ–Ω–¥–∑—è —É–ø–æ–≤—ñ–ª—å–Ω–µ–Ω–æ—ó –¥—ñ—ó",
               "–Ø –Ω–µ –ª—é–±–ª—é –¥–æ—â, —Ü–µ –≤—Å–µ –æ–¥–Ω–æ, —â–æ –ø—Ä–∏–π–º–∞—Ç–∏ –¥—É—à –≤ –æ–¥—è–∑—ñ",
               "–Ø —Ä–∞–≤–ª–∏–∫, –∞ –Ω–µ —á–µ—Ä–µ–ø–∞—Ö–∞. –ó—Ä–æ–∑—É–º—ñ–π—Ç–µ —Ü–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –ª—é–¥–∏!",
               "–Ø –Ω–µ –ª—ñ–Ω–∏–≤–∏–π, —è –ø—Ä–æ—Å—Ç–æ –µ–∫–æ–Ω–æ–º–ª—é –µ–Ω–µ—Ä–≥—ñ—é",
               "–Ø –Ω–µ —à–∫—ñ–¥–Ω–∏–∫ —Å–∞–¥—É, —è –π–æ–≥–æ –ø—Ä–∏–∫—Ä–∞—à–∞—é",
               "–Ø –Ω–µ –ø—Ä–æ—Å—Ç–æ —Ä–∞–≤–ª–∏–∫, —è —à–≤–∏–¥–∫—ñ—Å–Ω–∏–π –≥–æ–Ω—â–∏–∫ –≤ —Å–ø–æ–≤—ñ–ª—å–Ω–µ–Ω—ñ–π –∑–π–æ–º—Ü—ñ",
               "–Ø –Ω–µ –±–æ—é—Å—è –ø—Ç–∞—Ö—ñ–≤, –≤–æ–Ω–∏ –º–µ–Ω–µ –ø—Ä–æ—Å—Ç–æ –ø—ñ–¥–≤–æ–∑—è—Ç—å",
               "–Ø –Ω–µ –∑–∞–∫—É—Å–∫–∞, —è –¥–µ–ª—ñ–∫–∞—Ç–µ—Å",
               "–Ø –Ω–µ —Å–ª–∏–∑—å–∫–∏–π, —è –ø—Ä–æ—Å—Ç–æ —Ç—Ä–æ—Ö–∏ –≤–æ–ª–æ–≥–∏–π",
               "–Ø –Ω–µ –ø–æ–≤—ñ–ª—å–Ω–∏–π, —è –ø—Ä–æ—Å—Ç–æ –Ω–µ –ø–æ—Å–ø—ñ—à–∞—é",
               "–Ø –Ω–µ —Å–ª–∏–º–∞–∫, —è —Ä–∞–≤–ª–∏–∫ –∑—ñ —Å—Ç–∏–ª–µ–º",
               "–Ø –Ω–µ –ø–æ–≤—ñ–ª—å–Ω–∏–π, —è –ø—Ä–æ—Å—Ç–æ –Ω–∞—Å–æ–ª–æ–¥–∂—É—é—Å—è –∂–∏—Ç—Ç—è–º",
               "–ú–æ–∂–µ, —è —ñ —Å–ª–∏–∑—å–∫–∏–π, –∞–ª–µ –ø—Ä–∏–Ω–∞–π–º–Ω—ñ –Ω–µ –ª–∏–ø–∫–∏–π",
               "–Ø, –º–æ–∂–ª–∏–≤–æ, –º–∞–ª–µ–Ω—å–∫–∏–π, –∞–ª–µ —É –º–µ–Ω–µ –≤–µ–ª–∏–∫–∞ –æ—Å–æ–±–∏—Å—Ç—ñ—Å—Ç—å",
               "–Ø –Ω–µ –±–æ—é—Å—è –ø—Ç–∞—Ö—ñ–≤, —Ü–µ –ø—Ç–∞—Ö–∏ –±–æ—è—Ç—å—Å—è –º–µ–Ω–µ",
               "–Ø –Ω–µ —à–∫—ñ–¥–Ω–∏–∫, —è –≥—ñ—Å—Ç—å",
               "–Ø –Ω–µ —Å–ª–∏–∑—å–∫–∏–π, —è —Å–ø—Ä–∏—Ç–Ω–∏–π",
               "–Ø –Ω–µ –ø—Ä–æ—Å—Ç–æ —Å–ª–∏–º–∞–∫, —è –∑–∞–º–∞—Å–∫–æ–≤–∞–Ω–∏–π —Å—É–ø–µ—Ä–≥–µ—Ä–æ–π",
               "–Ø —è–∫ —Ä–∞–≤–ª–∏–∫, –∞–ª–µ –±–µ–∑ –±—É–¥–∏–Ω–æ—á–∫–∞",
               "–Ø –Ω–µ –Ω—É–¥–Ω–∏–π, –º–µ–Ω–µ –ø—Ä–æ—Å—Ç–æ –Ω–µ —Ä–æ–∑—É–º—ñ—é—Ç—å",
               "–ú–æ–∂–ª–∏–≤–æ, —è –ø–æ–≤—ñ–ª—å–Ω–∏–π, –∞–ª–µ –≤ –∫—ñ–Ω—Ü—ñ –∫—ñ–Ω—Ü—ñ–≤ —è –∑–∞–≤–∂–¥–∏ –¥–æ—Å—è–≥–∞—é –º–µ—Ç–∏",
               "–¢–∏—Ö—ñ—à–µ —ó–¥–µ—à - –¥–∞–ª—ñ –±—É–¥–µ—à, –¥—Ä—É–∂–µ!"
               "–ù–µ –¥–æ–∑–≤–æ–ª—è–π –Ω—ñ–∫–æ–º—É –∫–∞–∑–∞—Ç–∏ —Ç–æ–±—ñ, —â–æ —Ç–∏ –Ω–µ –º–æ–∂–µ—à —á–æ–≥–æ—Å—å –¥–æ—Å—è–≥—Ç–∏, –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ —Ü–µ –∑–∞–π–º–µ –ø–µ–≤–Ω–∏–π —á–∞—Å",
               "–¢–∏ –º–æ–∂–µ—à –±—É—Ç–∏ –º–∞–ª–µ–Ω—å–∫–∏–º, –∞–ª–µ –ø–æ-—Å–≤–æ—î–º—É —Å–∏–ª—å–Ω–∏–º!",
               "–ü—Ä–æ–¥–æ–≤–∂—É–π —Ä—É—Ö–∞—Ç–∏—Å—è –≤–ø–µ—Ä–µ–¥, –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ —Ü–µ –ª–∏—à–µ –ø–æ—Ç—Ä–æ—Ö—É –∑–∞ —Ä–∞–∑",
               "–ö–æ–∂–Ω–∞ –ø–æ–¥–æ—Ä–æ–∂ –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ –æ–¥–Ω–æ–≥–æ –∫—Ä–æ–∫—É, –∞–±–æ, —è–∫ —É –º–æ—î–º—É –≤–∏–ø–∞–¥–∫—É, –∑ –æ–¥–Ω–æ–≥–æ —Å–ª–∏–∑—å–∫–æ–≥–æ —Å–ª—ñ–¥—É",
               "–í—ñ—Ä —É —Å–µ–±–µ, –Ω–∞–≤—ñ—Ç—å –∫–æ–ª–∏ —ñ–Ω—à—ñ –Ω–µ –≤—ñ—Ä—è—Ç—å",
               "–ù–µ –ø–æ—Å–ø—ñ—à–∞–π, —ñ —Ç–∏ –≤—Å–µ –æ–¥–Ω–æ –¥–æ—Å—è–≥–Ω–µ—à –º–µ—Ç–∏",
               "–®–ª—è—Ö –¥–æ —É—Å–ø—ñ—Ö—É –º–æ–∂–µ –±—É—Ç–∏ –¥–æ–≤–≥–∏–º, –∞–ª–µ –≤—Ä–µ—à—Ç—ñ-—Ä–µ—à—Ç –≤—ñ–Ω —Ç–æ–≥–æ –≤–∞—Ä—Ç–∏–π",
               "–ù—ñ–∫–æ–ª–∏ –Ω–µ –∑–¥–∞–≤–∞–π—Å—è, –Ω–∞–≤—ñ—Ç—å –∫–æ–ª–∏ —Å—Ç–∞—î –≤–∞–∂–∫–æ",
               "–ñ–∏—Ç—Ç—è —Å–ø–æ–≤–Ω–µ–Ω–µ –ø–µ—Ä–µ—à–∫–æ–¥, –∞–ª–µ —É —Ç–µ–±–µ —î —Å–∏–ª–∏, —â–æ–± —ó—Ö –ø–æ–¥–æ–ª–∞—Ç–∏",
               "–¢–∏ –Ω–µ –ø–æ–≤—ñ–ª—å–Ω–∏–π, —Ç–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞—Å–æ–ª–æ–¥–∂—É—î—à—Å—è –ø–æ–¥–æ—Ä–æ–∂–∂—é",
               "–ù–µ –ø–æ—Ä—ñ–≤–Ω—é–π —Å–µ–±–µ –∑ —ñ–Ω—à–∏–º–∏, —Ç–∏ –ø–æ-—Å–≤–æ—î–º—É —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π",
               "–ù–∞–π–≥–æ–ª–æ–≤–Ω—ñ—à–µ - —Ü–µ –ø—Ä–æ–¥–æ–≤–∂—É–≤–∞—Ç–∏ —Ä—É—Ö–∞—Ç–∏—Å—è –≤–ø–µ—Ä–µ–¥, –Ω–µ–∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–æ–≥–æ, –Ω–∞—Å–∫—ñ–ª—å–∫–∏ –º–∞–ª–∏–º —î –ø—Ä–æ–≥—Ä–µ—Å",
               "–ü–∞–º'—è—Ç–∞–π, —â–æ –∫–æ–∂–Ω–∞ –Ω–µ–≤–¥–∞—á–∞ - —Ü–µ –ª–∏—à–µ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ –º–∞–π–±—É—Ç–Ω—å–æ–≥–æ —É—Å–ø—ñ—Ö—É",
               "–¢–∏ –Ω–µ –ø—Ä–æ—Å—Ç–æ —Å–ª–∏–º–∞–∫, —Ç–∏ –ø–µ—Ä—à–æ–ø—Ä–æ—Ö–æ–¥–µ—Ü—å!",
               "–ù–µ –¥–æ–∑–≤–æ–ª—è–π –Ω—ñ–∫–æ–º—É –ø—Ä–∏—Ç—É–ø–∏—Ç–∏ —Ç–≤–æ—é —ñ—Å–∫—Ä—É, –ø—Ä–æ–¥–æ–≤–∂—É–π —Å—è—è—Ç–∏!",
               "–ü–æ–¥–æ—Ä–æ–∂ –º–æ–∂–µ –±—É—Ç–∏ –¥–æ–≤–≥–æ—é, –∞–ª–µ –≤–∏–¥ –∑ –≤–µ—Ä—à–∏–Ω–∏ —Ç–æ–≥–æ –≤–∞—Ä—Ç–∏–π",
               "–£ —Ç–µ–±–µ –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ —î —Å–∏–ª–∞, —â–æ–± –¥–æ—Å—è–≥—Ç–∏ –≤—Å—å–æ–≥–æ, —â–æ —Ç–∏ –∑–∞—Ö–æ—á–µ—à",
               "–ù–∞–≤—ñ—Ç—å —Ä–∞–≤–ª–∏–∫–∏ –∫–æ–ª–∏—Å—å –±—É–ª–∏ —Å–ª–∏–º–∞–∫–∞–º–∏, —Ç–æ–º—É –ø—Ä–æ–¥–æ–≤–∂—É–π —Ä—É—Ö–∞—Ç–∏—Å—è –≤–ø–µ—Ä–µ–¥ —ñ —Ç–∏ –¥–æ—Å—è–≥–Ω–µ—à –º–µ—Ç–∏"
               ]
    # output a random shenanigan to the user
    await ctx.send(f"@{ctx.author.name}, {random.choice(phrases)} {random.choice(emotes_slug)}")


@ bot.command(name='—á–æ–≥–æ')
async def who_is_he(ctx):
    await ctx.send(f"@{ctx.author.name}, —Å—Ç—Ä—ñ–º–µ—Ä–∞ –∑–≤–∞—Ç–∏ –í–∞—Å–∏–ª—å, –∞–ª–µ –≤—ñ–Ω –º–∞—î –ø—Ä—ñ–∑–≤–∏—â–µ –§–µ–¥–∏–Ω—è–∫, —Ç–æ–º—É –¥—Ä—É–∑—ñ –Ω–∞–∑–∏–≤–∞—é—Ç—å –π–æ–≥–æ –§–µ–¥—è. –í–∏ –º–æ–∂–µ—Ç–µ –Ω–∞–∑–∏–≤–∞—Ç–∏ –π–æ–≥–æ —è–∫ –≤–∞–º –∑–∞–≤–≥–æ–¥–Ω–æ :)")


@ bot.command(name='–¥–µ')
async def where_from(ctx):
    await ctx.send(f"@{ctx.author.name}, —Å—Ç—Ä—ñ–º–µ—Ä —Ä–æ–¥–æ–º –∑ –Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫–æ—ó –æ–±–ª–∞—Å—Ç—ñ, –∞–ª–µ –Ω–∞—Ä–∞–∑—ñ –ø–µ—Ä–µ–±—É–≤–∞—î –≤ –ê–Ω–≥–ª—ñ—ó :)")


@ bot.command(name='–±–ª—ñ–Ω')
async def no_ignore_please(ctx):
    await ctx.send(f"@PixelFedya")
    await asyncio.sleep(2)
    input_txt = ctx.content[5:]
    await send_split_message(ctx, input_txt)
    await asyncio.sleep(2)
    await ctx.send(f"@PixelFedya")


def replace_characters(string, char_dict):
    new_string = ""
    for char in string:
        if char in char_dict:
            new_string += char_dict[char]
        else:
            new_string += char
    return new_string


@ bot.command(name='–æ–π', aliases=['–¥—ñ–¥—å–∫–æ', '–±–ª—è'])
async def oh_no_my_keyboard(ctx):
    message = messages_tracker[ctx.author.name][-2]
    output_text = replace_characters(message, letters_dict)
    await ctx.send(f"@{ctx.author.name}, {output_text}")


@ bot.command(name='–±–∞—Ç—å–∫–æ', aliases=['–±–∞—Ç', '–±–∞—Ç—è'])
async def who_father(ctx):
    username = '@' + random.choice(list(last_message_time))
    phrase = ["–º–∞–±—É—Ç—å —î", "—Ç–æ —î", "—Å–∫–æ—Ä—ñ—à –∑–∞ –≤—Å–µ —î",
              "–ø–æ—Ö–æ–¥—É —î", "—Ç–æ, –Ω–∞–∂–∞–ª—å, —î"]
    await ctx.send(f"@{ctx.author.name}, —Ç–≤—ñ–π –±–∞—Ç—å–∫–æ {random.choice(phrase)} {username} {random.choice(emotes_all_twitch)}")


@ bot.command(name='–±–∞—Ç–ª', aliases=['—à–æ–≥–æ', '—Å—é–¥–∏'])
async def invoke_duel(ctx):
    # get username from message
    username = ctx.content[5:]
    # check if no user is tagged in the message
    if "@" not in username:
        # if not set username to the user who sent the message
        global last_message_time
        username = '@' + random.choice(list(last_message_time))
    await ctx.send(f"@{ctx.author.name}, —Ç–≤—ñ–π –±–∞—Ç—å–∫–æ {random.choice(phrase)} {username} {random.choice(emotes_all_twitch)}")


@ bot.command(name='–∫–æ—Ü', aliases=['–±—É—Ü', '—è–π–∫'])
async def easter_fight(ctx):
    username = ctx.content[4:]
    if '@' not in username:
        global last_message_time
        username = '@' + random.choice(list(last_message_time))
    users = [ctx.author.name, username]
    result = random.choice(users)
    await ctx.send(f"@{ctx.author.name}, —Ü–æ–∫–Ω—É–≤—Å—è —è–π–æ–ª–∞–º–∏ –∑ {username}. {result} –ø–µ—Ä–µ–º—ñ–≥!")

if __name__ == "__main__":
    # launch bot
    bot.run()
